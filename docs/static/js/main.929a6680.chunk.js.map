{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","setCategorias","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA4BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAkBP,GAAlB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdpB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCUVG,EAhBJ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACG,mCACTC,EAFM,iDAE0CF,EAF1C,6BACG,oCADH,SAGOG,MAAMD,GAHb,cAGNE,EAHM,gBAIWA,EAAKC,OAJhB,uBAIJC,EAJI,EAIJA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAGtCY,QAAQC,IAAIT,GAZA,kBAaLC,GAbK,4CAAH,sDCWES,EATM,SAAC,GAAmB,EAAlBN,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAE5B,OACI,sBAAKe,UAAU,OAAf,UACG,qBAAKC,IAAKhB,EAAKiB,IAAKR,IACpB,4BAAIA,QCqBAS,EAvBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAOjB,ECT0B,SAACA,GAEzB,MAA0Bd,mBAAS,CAChCoB,KAAK,GACLe,SAAQ,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAYD,OAPAC,qBAAU,WACTzB,EAAQC,GAAUyB,MAAK,SAACC,GAAD,OAAUH,EAAS,CACtCjB,KAAKoB,EACLL,SAAQ,SAEX,CAACrB,IAEIsB,EDLsBK,CAAa3B,GAA/BY,EAAZ,EAAON,KAAYe,EAAnB,EAAmBA,QAEnB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAClDqB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEV,qBAAKA,UAAU,aAAf,SACCL,EAAOJ,KAAI,SAACC,GAAD,OAEV,aADA,CACC,EAAD,eAA8BA,GAAZA,EAAIC,aEejBkB,G,MAjCO,WAIlB,MAAkC1C,mBAAS,CAAC,cAA5C,mBAAOQ,EAAP,KAAkBmC,EAAlB,KAOA,OACI,gCACI,gDACA,uBACA,cAAC,EAAD,CAAa5C,cAAe4C,IAEhC,6BAEQnC,EAAWc,KAAK,SAACR,GAAD,OAEZ,aADA,CACC,EAAD,CAAwBA,SAAUA,GAApBA,aCbnB8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.929a6680.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const onchangeInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((categorias) => [ inputValue,...categorias]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={onchangeInput} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (category) => {\r\n    const apiKey = \"CYMyeU8cKkUcD8myc1pnsgDAmrfI9iZA\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${apiKey}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    console.log(data);\r\n    return gifs;\r\n  };\r\n\r\n  export default getGifs;","import React from 'react'\r\n\r\n const GifGridItem = ({id,title,url}) => {\r\n   \r\n    return (\r\n        <div className=\"card\"> \r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default GifGridItem;","import React, { useState, useEffect } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n//import getGifs from \"../helpers/getGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  /* const [images, setImages] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => setImages(imgs));\r\n  }, [category]);*/ // array vacio se ejecuta solo una vez\r\n  \r\n  const {data:images,loading} = useFetchGifs(category);\r\n  \r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n      { <div className=\"card-grid \">\r\n        {images.map((img) => (\r\n          // <GifGridItem key={img.id} img={img} />\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n        </div> }\r\n    </>\r\n  );\r\n};\r\nexport default GifGrid;\r\n","//custom hooks\r\nimport {useState,useEffect} from 'react';\r\nimport getGifs from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setState] = useState({\r\n       data:[],\r\n       loading:true\r\n   })\r\n\r\n   useEffect(() => {\r\n    getGifs(category).then((imgs) => setState({\r\n        data:imgs,\r\n        loading:false\r\n    }));\r\n  }, [category]); // array vacio se ejecuta solo una vez\r\n\r\n   return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\nimport './index.css';\r\n const GifExpertApp = () => {\r\n\r\n   // const categories = ['One' ,'Samurai', 'Dragon'];\r\n\r\n    const [categorias,setCategorias]= useState(['One Punch']);\r\n\r\n    //const handleAdd = () => {\r\n     //  setCategorias([...categorias,'yasser']);\r\n       //setCategorias(['yasser',...categorias]); que se inserte al principio del arreglo\r\n      // setCategories(categorias => [...categorias,inputValue]); lo mejor para setear el state desde otro componente\r\n   // }\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={setCategorias} />\r\n       \r\n        <ol>\r\n            {\r\n                categorias.map( (category) => \r\n                    //return <li key={category}>{category}</li>\r\n                    <GifGrid key={category} category={category} />\r\n                )\r\n               /*categories.map( (category,index) => {\r\n                   return <li key={index}>{category}</li>\r\n               })*/\r\n               \r\n            }\r\n        </ol>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}